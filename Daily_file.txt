always {
                    step([$class: 'XUnitBuilder',
                        thresholds: [
                            [$class: 'SkippedThreshold', failureThreshold: '0'],
                            // Allow for a significant number of failures
                            // Keeping this threshold so that overwhelming failures are guaranteed
                            //     to still fail the build
                            [$class: 'FailedThreshold', failureThreshold: '10']],
                        tools: [[$class: 'JUnitType', pattern: 'reports/**']]])

                    saucePublisher()
                }



                step([
                    $class: 'XUnitBuilder', testTimeMargin: '3000', thresholdMode: 1,
                    thresholds: [
                        [$class: 'FailedThreshold', failureNewThreshold: '', failureThreshold: '0', unstableNewThreshold: '', unstableThreshold: ''],
                        [$class: 'SkippedThreshold', failureNewThreshold: '', failureThreshold: '', unstableNewThreshold: '', unstableThreshold: '']
                    ],
                    tools: [[
                        $class: 'UnitTestJunitHudsonTestType',
                        deleteOutputFiles: true,
                        failIfNotNew: true,
                        pattern: 'result.xml',
                        skipNoTestFiles: false,
                        stopProcessingIfError: true
                    ]]
                ])


                <groupId>xUnit</groupId>
                <artifactId>xUnit</artifactId>
                <version>1.62</version>


                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>3.8.1</version>

                step([$class: 'XUnitBuilder', thresholds: [[$class: 'FailedThreshold',
                unstableThreshold: '1']],tools: [[$class: 'JUnitType', pattern: 'target/surefire-reports/**']]])

                publishHTML([allowMissing: true, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'target/surefire-reports',reportFiles: '*.xml',reportName: 'Coverage Report',reportTitles: ''])


************************************************************************************

stage ('test') {
            steps {
                parallel (
                    "unit tests": { sh 'mvn test' },
                    "integration tests": { sh 'mvn integration-test' }
                )
            }

***********************************************************************************
Deploy -

stage ('Artifactory Deploy'){
when {
branch "master"
}
steps{
dir("project_templates/java_project_template"){
script {
def server = Artifactory.server('artifactory')
def rtMaven = Artifactory.newMavenBuild()
rtMaven.resolver server: server, releaseRepo: 'libs-release', snapshotRepo: 'libs-snapshot'
rtMaven.deployer server: server, releaseRepo: 'libs-release-local', snapshotRepo: 'libs-snapshot-local'
rtMaven.tool = 'maven 3'
def buildInfo = rtMaven.run pom: 'pom.xml', goals: 'install'
server.publishBuildInfo buildInfo
}
}
}
}
